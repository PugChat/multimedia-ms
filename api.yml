#Test with: http://editor.swagger.io/

swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for Multimedia services
  description: Golang + MySQL
  license:
    name: Software Architecture, 2019-II
host: localhost:8081
basePath: /entries
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /entries:
    post:
      summary: Creates a new file
      operationId: createFile
      parameters:
        - name: user
          in: body
          required: true
          description: File Object
          schema:
            $ref: '#/definitions/FileInput'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
    get:
      summary: Returns all files
      operationId: getAllFiles
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/FilesList'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /entries/{id}:
    get:
      summary: Returns an file with the given id
      operationId: getFileById
      parameters:
        - name: id
          in: path
          description: The id of the user to be returned
          required: true
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/File'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      summary: Updates an user with the given id
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The id of the user to be updated
          required: true
          type: integer
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/FileInput'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      summary: Deletes an user with the given id
      operationId: deleteCUser
      parameters:
        - name: id
          in: path
          description: The id of the user to be deleted
          required: true
          type: integer
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

definitions:

  # Files
  File:
    type: object
    properties:
      id:
        type: integer
      userid:
        type: integer
      name:
        type: string
      link:
        type: string
      chatID:
        type: string
        

  FileInput:
    type: object
    properties:
      id:
        type: integer
      userid:
        type: integer
      name:
        type: string
      link:
        type: string
      chatID:
        type: string

  FilesList:
    type: object
    required:
      - list
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/File'

# Errors
  ErrorModel:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: number
      description:
        type: object
